// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: hasher.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HasherServiceClient is the client API for HasherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HasherServiceClient interface {
	GenerateHash(ctx context.Context, in *Password, opts ...grpc.CallOption) (*Hash, error)
	CompareHashAndPassword(ctx context.Context, in *CompareRequest, opts ...grpc.CallOption) (*CompareResponse, error)
}

type hasherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHasherServiceClient(cc grpc.ClientConnInterface) HasherServiceClient {
	return &hasherServiceClient{cc}
}

func (c *hasherServiceClient) GenerateHash(ctx context.Context, in *Password, opts ...grpc.CallOption) (*Hash, error) {
	out := new(Hash)
	err := c.cc.Invoke(ctx, "/hasher.HasherService/GenerateHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hasherServiceClient) CompareHashAndPassword(ctx context.Context, in *CompareRequest, opts ...grpc.CallOption) (*CompareResponse, error) {
	out := new(CompareResponse)
	err := c.cc.Invoke(ctx, "/hasher.HasherService/CompareHashAndPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HasherServiceServer is the server API for HasherService service.
// All implementations must embed UnimplementedHasherServiceServer
// for forward compatibility
type HasherServiceServer interface {
	GenerateHash(context.Context, *Password) (*Hash, error)
	CompareHashAndPassword(context.Context, *CompareRequest) (*CompareResponse, error)
	mustEmbedUnimplementedHasherServiceServer()
}

// UnimplementedHasherServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHasherServiceServer struct {
}

func (UnimplementedHasherServiceServer) GenerateHash(context.Context, *Password) (*Hash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateHash not implemented")
}
func (UnimplementedHasherServiceServer) CompareHashAndPassword(context.Context, *CompareRequest) (*CompareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareHashAndPassword not implemented")
}
func (UnimplementedHasherServiceServer) mustEmbedUnimplementedHasherServiceServer() {}

// UnsafeHasherServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HasherServiceServer will
// result in compilation errors.
type UnsafeHasherServiceServer interface {
	mustEmbedUnimplementedHasherServiceServer()
}

func RegisterHasherServiceServer(s grpc.ServiceRegistrar, srv HasherServiceServer) {
	s.RegisterService(&HasherService_ServiceDesc, srv)
}

func _HasherService_GenerateHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Password)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HasherServiceServer).GenerateHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hasher.HasherService/GenerateHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HasherServiceServer).GenerateHash(ctx, req.(*Password))
	}
	return interceptor(ctx, in, info, handler)
}

func _HasherService_CompareHashAndPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HasherServiceServer).CompareHashAndPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hasher.HasherService/CompareHashAndPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HasherServiceServer).CompareHashAndPassword(ctx, req.(*CompareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HasherService_ServiceDesc is the grpc.ServiceDesc for HasherService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HasherService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hasher.HasherService",
	HandlerType: (*HasherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateHash",
			Handler:    _HasherService_GenerateHash_Handler,
		},
		{
			MethodName: "CompareHashAndPassword",
			Handler:    _HasherService_CompareHashAndPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hasher.proto",
}
